@model CloudSolutions.Surveys.ViewModels.PredefinedListSurveyControlPartMetadataViewModel
@using OrchardCore
@using OrchardCore.ContentFields.Settings
@{
    var editorItems = new List<SelectListItem>()
{
        new SelectListItem(EditorOption.Dropdown.ToString(), EditorOption.Dropdown.ToString()),
        new SelectListItem(EditorOption.Radio.ToString(), EditorOption.Radio.ToString()),
    };

    var minLengthWrapperId = Html.IdFor(x => x.MinLength) + "_FieldWrapper";
    var maxLengthWrapperId = Html.IdFor(x => x.MaxLength) + "_FieldWrapper";
    var allowMultipleId = Html.IdFor(x => x.Multiple);
}

<div class="@Orchard.GetWrapperClasses("field-wrapper")" id="@Html.IdFor(x => x.Hint)_FieldWrapper">
    <label asp-for="Hint" class="@Orchard.GetLabelClasses()">@T["Description"]</label>
    <div class="@Orchard.GetEndClasses()">
        <textarea asp-for="Hint" class="form-control"></textarea>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses("field-wrapper")" id="@Html.IdFor(x => x.IsRequired)_FieldWrapper">
    <div class="@Orchard.GetEndClasses(true)">
        <div class="form-check">
            <input type="checkbox" asp-for="IsRequired" class="form-check-input">
            <label asp-for="IsRequired" class="form-check-label">@T["Required"]</label>
        </div>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses("field-wrapper")">
    <label asp-for="Threshold" class="@Orchard.GetLabelClasses()">@T["Threshold for notifications"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input type="number" asp-for="Threshold" class="form-control" step="0.1" />
        <span class="hint">
            @T["When set, any coach for the interviewee that accepts notification will be notified if the respond's weight is below the threshold"]
        </span>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses("field-wrapper")" id="@Html.IdFor(x => x.Multiple)_FieldWrapper">
    <div class="@Orchard.GetEndClasses(true)">
        <div class="form-check">
            <input type="checkbox" asp-for="Multiple" class="form-check-input allow-multiple-options">
            <label asp-for="Multiple" class="form-check-label">@T["Allow Multiple selection"]</label>
        </div>
    </div>
</div>

<div class="@Orchard.GetWrapperClasses("field-wrapper","expose-for-multiple-options")" id="@minLengthWrapperId">
    <label asp-for="MinLength" class="@Orchard.GetLabelClasses()">@T["Minimum options to allow"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input type="number" asp-for="MinLength" class="form-control" step="0.1" />
        @T["Leave it blank to allow unlimited selection"]
    </div>
</div>

<div class="@Orchard.GetWrapperClasses("field-wrapper","expose-for-multiple-options")" id="@maxLengthWrapperId">
    <label asp-for="MaxLength" class="@Orchard.GetLabelClasses()">@T["Maximum options to allow"]</label>
    <div class="@Orchard.GetEndClasses()">
        <input type="number" asp-for="MaxLength" class="form-control" step="0.1" />
        <small class="form-text text-muted">
            @T["Leave it blank to allow unlimited selection"]
        </small>
    </div>
</div>

<script>

    if (document.getElementById('@minLengthWrapperId')) {
        let multipleBoxes = document.getElementsByClassName('allow-multiple-options');

        for (let i = 0; i < multipleBoxes.length; i++) {
            let multipleBox = multipleBoxes[i];

            multipleBox.addEventListener('change', showHideExposeForMultiple);
            multipleBox.dispatchEvent(new Event('change'));
        }

        function showHideExposeForMultiple(e) {
            let container = e.target.closest('.edit-container');
            let exposeForMultiple = container.querySelectorAll('.expose-for-multiple-options')

            for (let x = 0; x < exposeForMultiple.length; x++) {
                if (e.target.checked) {
                    exposeForMultiple[x].classList.remove('d-none');
                } else {
                    exposeForMultiple[x].classList.add('d-none');
                }
            }
        }
    }

</script>
