@model InterviewDataWithDefinedRangePartViewModel
@inject CloudSolutions.Surveys.Core.ISurveyPresenter SurveyPresenter
@using CloudSolutions.Teams
@using Microsoft.Extensions.Http
@inject ITeamStore TeamStore
@{
    var userId = await ViewContext.HttpContext.UserIdAsync();
    var teams = await TeamStore.GetAccessibleItemsAsync(userId);
    var versionMenuId = Html.IdFor(x => x.SurveyVersionId);
    var hasInputs = !string.IsNullOrEmpty(Model.SurveyVersionId) && Model.InputIds != null && Model.InputIds.Any();
    var inputWrapperId = Html.IdFor(x => x.InputIds) + "_FieldWrapper";
}

<div class="mb-3 row field-wrapper" id="@Html.IdFor(x => x.SurveyVersionId)_FieldWrapper">
    <label asp-for="SurveyVersionId" class="col-md-8 col-xl-3 col-form-label text-md-end">@T["Survey"]</label>
    <div class="col-md-8 col-xl-9">
        <select class="form-control content-preview-select" asp-for="SurveyVersionId" asp-items="await SurveyPresenter.GetVersionsSelectListItemsAsync()">
            <option value="">@T["Select a Survey"]</option>
        </select>
    </div>
</div>

<div class="mb-3 row field-wrapper@(!hasInputs ? " d-none": String.Empty)" id="@inputWrapperId">
    <label asp-for="InputIds" class="col-md-8 col-xl-3 col-form-label text-md-end">@T["Inputs to show on chart"]</label>
    <div class="col-md-8 col-xl-9">
        <select class="form-control content-preview-select" asp-for="InputIds" data-original-values="@string.Join(',', Model.InputIds ?? Array.Empty<string>())" asp-items="Enumerable.Empty<SelectListItem>()">
        </select>
    </div>
</div>

<div class="mb-3 row field-wrapper" id="@Html.IdFor(x => x.Range)_FieldWrapper">
    <label asp-for="Range" class="col-md-8 col-xl-3 col-form-label text-md-end">@T["Data Range"]</label>
    <div class="col-md-8 col-xl-9">
        <select class="form-control content-preview-select" asp-for="Range" asp-items="@InterviewDataWithDefinedRangePartViewModel.RangeOptions">
            <option value="">@T["Select a range"]</option>
        </select>
    </div>
</div>

<div class="mb-3 row field-wrapper" id="@Html.IdFor(x => x.DataSource)_FieldWrapper">
    <label asp-for="DataSource" class="col-md-8 col-xl-3 col-form-label text-md-end">@T["Data Source"]</label>
    <div class="col-md-8 col-xl-9">
        <select class="form-control content-preview-select" asp-for="DataSource" asp-items="@InterviewDataWithDefinedRangePartViewModel.DataSourceOptions">
            <option value="">@T["Select a source"]</option>
        </select>
    </div>
</div>

<div class="mb-3 row field-wrapper@(!Model.IsSpecificTeams() ? " d-none" : String.Empty)" id="@Html.IdFor(x => x.Teams)_FieldWrapper">
    <label asp-for="Teams" class="col-md-8 col-xl-3 col-form-label text-md-end">@T["Teams"]</label>
    <div class="col-md-8 col-xl-9">
        <select class="form-control content-preview-select" asp-for="Teams" asp-items="await TeamStore.GetItemsAsync()">
        </select>
    </div>
</div>

<script at="Foot">
    document.addEventListener('DOMContentLoaded', function () {
        function getValueAsArray(value) {

            if (!value) {
                return [];
            }

            if (Array.isArray(value)) {
                return value;
            }

            return value.split(',');
        }

        var versionMenu = document.getElementById('@versionMenuId');

        versionMenu.addEventListener('change', (e) => {

            if (!e.target.value) {
                return;
            }

            var url = '@Url.Action("Columns", "ReportStructures", new { area = CloudSolutions.Surveys.Startup.ModuleName, surveyVersionId = "surveyVersionId" })';

            url = url.replace('surveyVersionId', e.target.options[e.target.selectedIndex].value);

            if (!url) {
                return;
            }

            var inputWrapper = document.getElementById('@inputWrapperId');
            var inputsMenu = document.getElementById('@Html.IdFor(x => x.InputIds)');

            for (let i = inputsMenu.options.length - 1; i >= 0; i--) {

                if (inputsMenu.options[i].value == '') {
                    continue;
                }

                inputsMenu.options[i].remove();
            }

            inputWrapper.classList.add('d-none');
            var originalInputIds = getValueAsArray(inputsMenu.getAttribute('data-original-values') || []);

            fetch(url)
                .then(response => response.json())
                .then(items => {

                    var totalItems = items.length;

                    for (let x = 0; x < totalItems; x++) {
                        let item = items[x];

                        if (!item.title || !item.inputId) {
                            continue;
                        }

                        var option = document.createElement("option");
                        option.text = item.title;
                        option.value = item.inputId;

                        if (originalInputIds.includes(item.inputId)) {
                            option.selected = true;
                        }

                        inputsMenu.appendChild(option);
                    }

                    inputWrapper.classList.remove('d-none');

                });

        });

        versionMenu.dispatchEvent(new Event("change"));
    });
</script>
